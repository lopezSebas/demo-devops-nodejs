# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

resources:
 repositories:
   - repository: self
     trigger:
      - master

pool:
  vmImage: ubuntu-latest

variables:
  shouldExecuteTestStage: true
  ACR: slldemoacr.azurecr.io

stages:
- stage: IaC
  condition: eq(variables['shouldExecuteTestStage'], 'false')
  displayName: Build Terraform
  jobs:
  - job: Build_Terraform
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        artifact: 'terraform-manifests-out'
        publishLocation: 'pipeline'
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        backendServiceArm: 'Azure-MS'
        backendAzureRmResourceGroupName: 'AKSsll'
        backendAzureRmStorageAccountName: 'terraformstatexlrwdrzs'
        backendAzureRmContainerName: 'tfstatefiles'
        backendAzureRmKey: 'aks-base.tfstate'

- stage: Code_Build
  condition: eq(variables['shouldExecuteTestStage'], 'true')
  displayName: Build Node JS
  jobs:
  - job: Build_Code
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.15.0'
      displayName: 'Install Node.js'
    - script: |
        npm install 
      displayName: 'Install dependencies'
    - script: |
        export NODE_ENV=test
        npm test -- --coverage
      env:
        DATABASE_NAME: $(DATABASE_NAME)
        DATABASE_USER: $(DATABASE_USER)
        DATABASE_PASSWORD: $(DATABASE_PASSWORD)
      displayName: 'Run Tests with coverage'
    - task: replacetokens@6
      inputs:
        sources: 'kubernetes/nodejs-demo-aks.yml'
        addBOM: true
    - task: PublishTestResults@2
      enabled: false
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/coverage/junit.xml'
        mergeTestResults: true
        testRunTitle: 'Test Results'
    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)'
      displayName: 'Publicar cobertura de cÃ³digo'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Static_Code_Analysis
  condition: eq(variables['shouldExecuteTestStage'], 'false')
  displayName: DevSecOps
  jobs:
  - job: Static_Code_Analysis
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: SonarCloudPrepare@2
      inputs:
        SonarCloud: 'Token-sonarcloud'
        organization: 'sonarcloud-lopezsebas'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'sonar-devops-nodejs'
        cliProjectName: 'NodeJS'
        cliSources: '.'
    - task: SonarCloudAnalyze@2
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
    - task: SonarCloudPublish@2
      inputs:
        pollingTimeoutSec: '300'
    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'demo-nodejs'
        cliProjectName: 'demo-nodejs'
        cliSources: '.'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.host.url=http://20.9.136.190:9000/
          sonar.login=$(LOGINSQ)
          sonar.projectVersion=1.0
          sonar.sources=.
          sonar.exclusions=node_modules/**, coverage/**
          sonar.tests=.
          sonar.test.inclusions=**/*.test.js, **/*.spec.js
          sonar.sourceEncoding=UTF-8
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
    - task: SonarQubeAnalyze@6
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'      
    - task: SonarQubePublish@6
      enabled: false
      inputs:
        pollingTimeoutSec: '300'
    - task: SnykSecurityScan@1
      displayName: Snyk SAST scan for code vulnerabilities
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'code'
        failOnIssues: false
        projectName: 'NodeJS'
        organization: 'slorenzonl'
    - task: SnykSecurityScan@1
      displayName: Snyk SCA for open source vulnerabilities
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: 'DevOpsNodeJS'
        organization: 'slorenzonl'

    - task: WhiteSource@21
      displayName: Scan vulnerabilities CVEs
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'

- stage: Scan_Secrets
  condition: eq(variables['shouldExecuteTestStage'], 'false')
  displayName: Scan Secrets
  jobs:
  - job: ubuntu
    displayName: "detect-secrets on Ubuntu Linux agent"
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        displayName: "Set Python 3 as default"
        inputs:
          versionSpec: "3"
          addToPath: true
          architecture: "x64"

      - bash: pip install detect-secrets
        displayName: "Install detect-secrets using pip"

      - bash: |
          detect-secrets --version
          detect-secrets scan --all-files --force-use-all-plugins --exclude-files FETCH_HEAD > $(Pipeline.Workspace)/detect-secrets.json
        displayName: "Run detect-secrets tool"

      - task: PublishPipelineArtifact@1
        displayName: "Publish results in the Pipeline Artifact"
        inputs:
          targetPath: "$(Pipeline.Workspace)/detect-secrets.json"
          artifact: "detect-secrets-ubuntu"
          publishLocation: "pipeline"

      - bash: |
          dsjson=$(cat $(Pipeline.Workspace)/detect-secrets.json)
          echo "${dsjson}"

          count=$(echo "${dsjson}" | jq -c -r '.results | length')

          if [ $count -gt 0 ]; then
            msg="Secrets were detected in code. ${count} file(s) affected."
            echo "##vso[task.logissue type=error]${msg}"
            echo "##vso[task.complete result=Failed;]${msg}."
          else
            echo "##vso[task.complete result=Succeeded;]No secrets detected."
          fi
        displayName: "Analyzing detect-secrets results"

- stage: Container
  condition: eq(variables['shouldExecuteTestStage'], 'true')
  displayName: Create Container
  jobs:
  - job: Create_Container
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'sc-az-docker-devops'
          repository: 'nodejs/demo'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'

- stage: DevSecOps_Container
  condition: eq(variables['shouldExecuteTestStage'], 'false')
  displayName: DevSecOps Container
  jobs:
  - job: Scan_vulnerability
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'sc-az-docker-devops'
          command: 'login'
      - task: trivy@1
        displayName: "Scan Container with Trivy"
        inputs:
          version: 'latest'
          loginDockerConfig: true
          image: 'slldemoacr.azurecr.io/nodejs/demo:$(Build.BuildId)'
          severities: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          exitCode: '0'
      - task: SnykSecurityScan@1
        displayName: "Scan Container with Snyk"
        inputs:
          serviceConnectionEndpoint: 'Snyk'
          testType: 'container'
          dockerImageName: 'slldemoacr.azurecr.io/nodejs/demo:$(Build.BuildId)'
          monitorWhen: 'always'
          failOnIssues: false
          projectName: 'Container-node-js'
          organization: 'slorenzonl'
          
- stage: Deploy_Kubernetes
  condition: eq(variables['shouldExecuteTestStage'], 'true')
  displayName: Deploy to a K8S
  jobs:
    - deployment: Deploy
      environment: approvals
      pool:
        vmImage: "ubuntu-latest"
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Kubernetes@1
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'Azure-MS'
                azureResourceGroup: 'AKSsll'
                kubernetesCluster: 'sll-demo-aks'
                command: 'apply'
                useConfigurationFile: true
                configuration: '$(Pipeline.Workspace)/drop/kubernetes/nodejs-demo-aks.yml'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'Azure-MS'
                azureContainerRegistry: 'slldemoacr.azurecr.io'
                secretName: 'mysecretkey'
            - task: Kubernetes@1
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'Azure-MS'
                azureResourceGroup: 'AKSsll'
                kubernetesCluster: 'sll-demo-aks'
                command: 'set'
                arguments: 'image deployments/nodejs-demo nodejs-demo=$(ACR)/nodejs/demo:$(Build.BuildId)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'Azure-MS'
                azureContainerRegistry: 'slldemoacr.azurecr.io'
                secretName: 'mysecretkey'