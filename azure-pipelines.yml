# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

resources:
 repositories:
   - repository: self
     trigger:
      - master

pool:
  vmImage: ubuntu-latest

variables:
  trivyVersion: 0.9.2
  tag: '$(Build.BuildNumber)'
  imageName: 'nodejs/demo'

stages:
- stage: Code_Build
  displayName: Build Node JS
  jobs:
  - job: Build_Code
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.15.0'
      displayName: 'Install Node.js'
      condition: 

    - script: |
        npm install 
      displayName: 'Install dependencies'
    - script: npm test -- --coverage
      displayName: 'Run Tests with coverage'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/coverage/junit.xml'
        mergeTestResults: true
        testRunTitle: 'Test Results'
    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)'
      displayName: 'Publicar cobertura de código'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Static_Code_Analysis
  displayName: DevSecOps
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: SonarCloudPrepare@2
      inputs:
        SonarCloud: 'Token-sonarcloud'
        organization: 'sonarcloud-lopezsebas'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'sonar-devops-nodejs'
        cliProjectName: 'NodeJS'
        cliSources: '.'
    - task: SonarCloudAnalyze@2
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
    - task: SonarCloudPublish@2
      inputs:
        pollingTimeoutSec: '300'

    - task: SnykSecurityScan@1
      displayName: Snyk SAST scan for code vulnerabilities
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'code'
        failOnIssues: false
        projectName: 'NodeJS'
        organization: 'slorenzonl'
    - task: SnykSecurityScan@1
      displayName: Snyk SCA for open source vulnerabilities
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: 'DevOpsNodeJS'
        organization: 'slorenzonl'

    - task: WhiteSource@21
      displayName: Scan vulnerabilities CVEs
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'

- stage: Scan_Secrets
  displayName: Scan Secrets
  condition: succeededOrFailed()
  jobs:
  - job: ubuntu
    displayName: "detect-secrets on Ubuntu Linux agent"
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        displayName: "Set Python 3 as default"
        inputs:
          versionSpec: "3"
          addToPath: true
          architecture: "x64"

      - bash: pip install detect-secrets
        displayName: "Install detect-secrets using pip"

      - bash: |
          detect-secrets --version
          detect-secrets scan --all-files --force-use-all-plugins --exclude-files FETCH_HEAD > $(Pipeline.Workspace)/detect-secrets.json
        displayName: "Run detect-secrets tool"

      - task: PublishPipelineArtifact@1
        displayName: "Publish results in the Pipeline Artifact"
        inputs:
          targetPath: "$(Pipeline.Workspace)/detect-secrets.json"
          artifact: "detect-secrets-ubuntu"
          publishLocation: "pipeline"

      - bash: |
          dsjson=$(cat $(Pipeline.Workspace)/detect-secrets.json)
          echo "${dsjson}"

          count=$(echo "${dsjson}" | jq -c -r '.results | length')

          if [ $count -gt 0 ]; then
            msg="Secrets were detected in code. ${count} file(s) affected."
            echo "##vso[task.logissue type=error]${msg}"
            echo "##vso[task.complete result=Failed;]${msg}."
          else
            echo "##vso[task.complete result=Succeeded;]No secrets detected."
          fi
        displayName: "Analyzing detect-secrets results"

- stage: Container
  condition: succeededOrFailed()
  displayName: Container
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'sc-az-docker-devops'
          repository: 'nodejs/demo'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'

- stage: DevSecOps_Container
  condition: succeededOrFailed()
  displayName: DevSecOps Container
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'sc-az-docker-devops'
          command: 'login'
      
      - script: |
         sudo apt-get install rpm
         wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
         sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
         trivy -v
        displayName: 'Download and install Trivy'

      - task: CmdLine@2
        enabled: false
        displayName: "Run trivy scan"
        inputs:
          script: |
              trivy image --severity LOW,MEDIUM --format template --template "@templates/junit.tpl" -o junit-report-low-med.xml $(imageName):$(tag)         
              trivy image --severity HIGH,CRITICAL --format template --template "@templates/junit.tpl" -o junit-report-high-crit.xml $(imageName):$(tag)         

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit-report-low-med.xml'
          mergeTestResults: true
          failTaskOnFailedTests: false
          testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
        condition: 'always()'   

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit-report-high-crit.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Trivy - High and Critical Vulnerabilities'
        condition: 'always()'             

      - task: AzureCLI@2
        enabled: false
        inputs:
          azureSubscription: 'Azure-MS'
          scriptType: 'batch'
          scriptLocation: 'inlineScript'
          inlineScript: 'az login --service-principal -u $(APP_ID) -p $(APP_SECRET) --tenant $(TENANT_ID)'
      - task: Bash@3
        enabled: false
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            export TRIVY_AUTH_URL=https://slldemoacr.azurecr.io
            export TRIVY_USERNAME=$(APP_ID)
            export TRIVY_PASSWORD=$(APP_SECRET)
            export AZURE_TENANT_ID=b62c282c-205f-4896-b0f9-6c0f15c0448b
            echo 'Hello world'
            cat << EOF > docker-config.json
            {
              "auths": {
                "slldemoacr.azurecr.io": {
                  "auth": "c2xsZGVtb2Fjci5henVyZWNyLmlvOkV6OUNxbyt0Nkgwd2dDaTZUS2xCd3VmeDBTc08vNW9oaVAzMllOZ1RmNCtBQ1JBV3lqRzQ="
                }
              }
            }

            echo 'entró aquí'
            export TRIVY_AUTH_URL=https://slldemoacr.azurecr.io
            export DOCKER_CONFIG=/path/to/docker-config.json
            
            docker run -it --rm -v /tmp:/tmp \
            -e TRIVY_USERNAME -e TRIVY_PASSWORD -e AZURE_TENANT_ID \
            aquasec/trivy image slldemoacr.azurecr.io/nodejs/demo:$(Build.BuildId)
      - task: trivy@1
        enabled: true
        displayName: "Scan Container with Trivy"
        inputs:
          version: 'latest'
          loginDockerConfig: true
          image: 'nodejs/demo:$(Build.BuildId)'
          severities: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          exitCode: '0'
      - task: SnykSecurityScan@1
        enabled: false
        displayName: "Scan Container with Snyk"
        inputs:
          serviceConnectionEndpoint: 'Snyk'
          testType: 'container'
          dockerImageName: 'nodejs/demo:$(Build.BuildId)'
          monitorWhen: 'always'
          failOnIssues: false
          projectName: 'Container-node-js'
          organization: 'slorenzonl'
          

- stage: Deploy_Kubernetes
  condition: succeededOrFailed()
  displayName: Deploy to a K8S
  jobs:
    - deployment: Deploy
      environment: approvals
      pool:
        vmImage: "ubuntu-latest"
      strategy:
        runOnce:
          deploy:
            steps:
            - task: CmdLine@2
              inputs:
                script: |
                  echo Write your commands here
                  
                  echo Hello world
            - task: Kubernetes@1
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'Azure-MS'
                azureResourceGroup: 'AKSsll'
                kubernetesCluster: 'sll-demo-aks'
                command: 'apply'
                useConfigurationFile: true
                configuration: '$(System.DefaultWorkingDirectory)/dmc.yaml'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'Azure-MS'
                azureContainerRegistry: 'slldemoacr.azurecr.io'
                secretName: 'mysecretkey'
            - task: Kubernetes@1
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscriptionEndpoint: 'Azure-MS'
                azureResourceGroup: 'AKSsll'
                kubernetesCluster: 'sll-demo-aks'
                command: 'set'
                arguments: 'image deployments/mhc-front mhc-front=$(ACR)/myhealth.web:$(Build.BuildId)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                azureSubscriptionEndpointForSecrets: 'Azure-MS'
                azureContainerRegistry: 'slldemoacr.azurecr.io'
                secretName: 'mysecretkey'
              enabled: false
